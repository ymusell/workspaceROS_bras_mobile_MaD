#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

import rospy
import sys
from sensor_msgs.msg import LaserScan
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Twist
from std_msgs.msg import Empty
import numpy as np
from math import sin, cos, pi, atan2
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import time
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
from geometry_msgs.msg import Point
import math

def scan_parking_spot():
    scan_done = False
    intensity_index = []
    index_count = []
    spot_angle_index = []
    minimun_scan_angle = 30
    maximun_scan_angle = 330
    intensity_threshold = 100
    center_angle = 0
    start_angle = 0
    end_angle = 0
    for i in range(360):
        if i >= minimun_scan_angle and i < maximun_scan_angle:
            spot_intensity = msg.intensities[i] ** 2 * msg.ranges[i] / 100000
            if spot_intensity >= intensity_threshold:
                intensity_index.append(i)
                index_count.append(i)
            else:
                intensity_index.append(0)
        else:
            intensity_index.append(0)

    for i in index_count:
        if abs(i - index_count[int(len(index_count) / 2)]) < 20:
            spot_angle_index.append(i)
            if len(spot_angle_index) > 10:
                scan_done = True
                center_angle = spot_angle_index[int(len(spot_angle_index) / 2)]
                start_angle = spot_angle_index[2]
                end_angle = spot_angle_index[-3]

            else:
                scan_done = False
    return scan_done, center_angle, start_angle, end_angle

def quaternion():
    quaternion = (
        odom.pose.pose.orientation.x,
        odom.pose.pose.orientation.y,
        odom.pose.pose.orientation.z,
        odom.pose.pose.orientation.w)
    euler = euler_from_quaternion(quaternion)
    yaw = euler[2]
    return yaw

def get_angle_distance(angle):
    distance = msg.ranges[int(angle)]
    if msg.ranges[int(angle)] is not None and distance is not 0:
        angle = int(angle)
        distance = distance
    return angle, distance

def get_point(start_angle_distance):
    angle = start_angle_distance[0]
    angle = np.deg2rad(angle - 180)
    distance = start_angle_distance[1]

    if angle >= 0 and angle < pi / 2:
        x = distance * cos(angle) * -1
        y = distance * sin(angle) * -1
    elif angle >= pi / 2 and angle < pi:
        x = distance * cos(angle) * -1
        y = distance * sin(angle) * -1
    elif angle >= -pi / 2 and angle < 0:
        x = distance * cos(angle) * -1
        y = distance * sin(angle) * -1
    else:
        x = distance * cos(angle) * -1
        y = distance * sin(angle) * -1

    return [x, y]

def finding_spot_position(center_angle, start_angle, end_angle): #Avoir la position des points
    print("scan parking spot done!")
    fining_spot = False
    start_angle_distance = get_angle_distance(start_angle)
    center_angle_distance = get_angle_distance(center_angle)
    end_angle_distance = get_angle_distance(end_angle)
    print ("valeur start angle",start_angle_distance)
    print ("valeur center angle",center_angle_distance)
    print ("valeur end angle",end_angle_distance)

    if start_angle_distance[1] != 0 and center_angle_distance[1] != 0 and end_angle_distance[1] != 0:
        print("calibration......")
        start_point = get_point(start_angle_distance)
        center_point = get_point(center_angle_distance)
        end_point = get_point(end_angle_distance)
        fining_spot = True
    else:
        fining_spot = False
        print("wrong scan!!")

    return fining_spot, start_point, center_point, end_point

def get_list_spot(center_angle, start_angle, end_angle): #Avoir la position des points
    # print("scan wall spot done!")
    list_spot = []
    list_distance = []
    for k in range(start_angle,center_angle-1,-1):
        angle_distance = get_angle_distance(k)
        if(angle_distance[1]!=0):
            list_spot.append(get_point(angle_distance))
            list_distance.append(angle_distance[1])
    for k in range(359,end_angle-1,-1):
        angle_distance = get_angle_distance(k)
        if(angle_distance[1]!=0):
            list_spot.append(get_point(angle_distance))
            list_distance.append(angle_distance[1])
    print("valeur mini : ",min(list_distance))
    # print(list_spot)
    # print("out")
    print("list_distance : ",list_distance)
    find_spot = False
    if len(list_spot)>=2:
        find_spot = True
    return find_spot,list_spot,list_distance

def rotate_origin_only(x, y, radians):
    xx = x * cos(radians) + y * sin(radians)
    yy = -x * sin(radians) + y * cos(radians)
    return xx, yy

def scan_spot_filter(msg, center_angle, start_angle, end_angle):
    scan_spot_pub = rospy.Publisher("/scan_spot", LaserScan, queue_size=1)
    scan_spot = msg
    scan_spot_list = list(scan_spot.intensities)
    for i in range(360):
        scan_spot_list[i] = 0
    scan_spot_list[center_angle] = 1000
    scan_spot_list[start_angle] = 1000
    scan_spot_list[end_angle] = 1000
    # scan_spot_list[start_angle] = msg.ranges[start_angle] + 10000
    # scan_spot_list[center_angle] = msg.ranges[center_angle] + 10000
    # scan_spot_list[end_angle] = msg.ranges[end_angle] + 10000
    scan_spot.intensities = tuple(scan_spot_list)
    scan_spot_pub.publish(scan_spot)

def fnDocking(theta): #fin de docking jusqu a la position finale
    Kp = 0.5    #1.2
    angular_z = Kp * theta

    twist = Twist()
    twist.linear.x = 0.07   #0.25 0.1
    twist.linear.y = 0
    twist.linear.z = 0
    twist.angular.x = 0
    twist.angular.y = 0
    twist.angular.z = angular_z
    cmd_pub.publish(twist)    # Present a la fin du programme

def fnShutDown():
    rospy.loginfo("Shutting down. cmd_vel will be 0")

    twist = Twist()
    twist.linear.x = 0
    twist.linear.y = 0
    twist.linear.z = 0
    twist.angular.x = 0
    twist.angular.y = 0
    twist.angular.z = 0
    cmd_pub.publish(twist)
    sys.exit()

markerArray = MarkerArray()
twist = Twist()
count = 0
gap_wanted_angle = 10*(pi/180)
wanted_angle = pi/2
min_dist = 0.167    #Valeur de distance minimale
if __name__=="__main__":
    rospy.init_node('AutoParking')
    cmd_pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
    reset_pub = rospy.Publisher('/reset', Empty, queue_size=1)
    publisher = rospy.Publisher("visualization_marker_array", MarkerArray, queue_size=1)
    msg = LaserScan()
    r = rospy.Rate(10)
    step = 0
    twist = Twist()
    reset = Empty()
    theta = 0

    while not rospy.is_shutdown():
        msg = rospy.wait_for_message("/scan", LaserScan)
        odom = rospy.wait_for_message("/odom", Odometry)
        yaw = quaternion()
        scan_done, center_angle, start_angle, end_angle = True, 0, 5, 355
        # list_scan_spot = scan_spot_filter(msg, center_angle, start_angle, end_angle)

        find_spot,list_spot,list_distance = get_list_spot(center_angle, start_angle, end_angle)
        if (find_spot): #On peut calculer theta car plus de deux valeurs
            theta = np.arctan2(list_spot[0][1] - list_spot[-1][1], list_spot[0][0] - list_spot[-1][0])
            find_spot = False
        print("test")
        print("theta : ",np.rad2deg(theta))
        marker = Marker()
        marker.header.frame_id = "/base_footprint"
        marker.type = marker.LINE_STRIP
        marker.scale.x = 0.02
        marker.scale.y = 0.02
        marker.color.a = 1.0
        marker.color.r = 0.5
        marker.color.g = 1.0
        marker.color.b = 0.0
        for points in list_spot:
            p = Point()
            p.x = points[0]
            p.y = points[1]
            p.z = 0
            marker.points.append(p)
        markerArray.markers.append(marker)  
        publisher.publish(markerArray)
        if (min(list_distance)>=min_dist):
            if(abs(wanted_angle-theta)<gap_wanted_angle):
                print("tout droit")
                fnDocking(0)
            else:
                print("nous tournons")
                print("theta-wanted_angle : ",theta-wanted_angle)
                fnDocking(theta-wanted_angle)
        else:
            fnShutDown()
